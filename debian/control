Source: libunwind
Priority: optional
Section: libs
Maintainer: Adrian Bunk <bunk@debian.org>
Build-Depends: debhelper (>= 10), liblzma-dev <!pkg.libunwind.nolzma>, texlive-extra-utils <!stage1>
Build-Conflicts: liblzma-dev <pkg.libunwind.nolzma>
Standards-Version: 4.1.1
Homepage: http://www.nongnu.org/libunwind

Package: libunwind-dev
Section: libdevel
Architecture: amd64 arm64 armel armhf hppa i386 ia64 mips mips64 mips64el mipsel powerpc powerpcspe ppc64 ppc64el sh4
Multi-Arch: same
Depends: ${misc:Depends}, libunwind8 (= ${binary:Version}), liblzma-dev <!pkg.libunwind.nolzma>
Conflicts: libunwind1-dev, libunwind7-dev
Replaces: libunwind8-dev (<< 1.1-3.2)
Provides: libunwind8-dev
Description: library to determine the call-chain of a program - development
 The primary goal of this project is to define a portable and efficient C
 programming interface (API) to determine the call-chain of a program.
 The API additionally provides the means to manipulate the preserved
 (callee-saved) state of each call-frame and to resume execution at any
 point in the call-chain (non-local goto). The API supports both local
 (same-process) and remote (across-process) operation. As such, the API
 is useful in a number of applications.
 .
 This package includes the development support files. 

Package: libunwind8
Architecture: amd64 arm64 armel armhf hppa i386 ia64 mips mips64 mips64el mipsel powerpc powerpcspe ppc64 ppc64el sh4
Multi-Arch: same
Pre-Depends:  ${misc:Pre-Depends}
Depends: ${misc:Depends}, ${shlibs:Depends}
Conflicts: libunwind1-dev
Replaces: libgcc1 (<< 1:4.0.0-2)
Description: library to determine the call-chain of a program - runtime
 The primary goal of this project is to define a portable and efficient C
 programming interface (API) to determine the call-chain of a program.
 The API additionally provides the means to manipulate the preserved
 (callee-saved) state of each call-frame and to resume execution at any
 point in the call-chain (non-local goto). The API supports both local
 (same-process) and remote (across-process) operation. As such, the API
 is useful in a number of applications.
 .
 This package includes the shared libraries

Package: libunwind-setjmp0-dev
Section: libdevel
Architecture: amd64 arm64 armel armhf hppa i386 ia64 mips mips64 mips64el mipsel powerpc powerpcspe ppc64 ppc64el sh4
Depends: ${misc:Depends}, libunwind-dev (= ${binary:Version}), libunwind-setjmp0 (= ${binary:Version})
Description: libunwind-based non local goto - development
 The unwind-setjmp library offers a libunwind-based implementation of
 non-local gotos. This implementation is intended to be a drop-in
 replacement for the normal, system-provided routines of the same name.
 The main advantage of using the unwind-setjmp library is  that  setting
 up a non-local goto via one of the setjmp() routines is very fast.
 .
 This package includes the development support files

Package: libunwind-setjmp0
Architecture: amd64 arm64 armel armhf hppa i386 ia64 mips mips64 mips64el mipsel powerpc powerpcspe ppc64 ppc64el sh4
Pre-Depends:  ${misc:Pre-Depends}
Depends: ${misc:Depends}, ${shlibs:Depends}
Description: libunwind-based non local goto - runtime
 The unwind-setjmp library offers a libunwind-based implementation of
 non-local gotos. This implementation is intended to be a drop-in
 replacement for the normal, system-provided routines of the same name.
 The main advantage of using the unwind-setjmp library is  that  setting
 up a non-local goto via one of the setjmp() routines is very fast.
 .
 This package includes the shared library 
